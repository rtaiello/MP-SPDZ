# (C) 2018 University of Bristol, Bar-Ilan University. See License.txt

program.optimize_for_gc()

def test(a, b, value_type=None):
    try:
        a = a.reveal()
    except AttributeError:
        pass
    import inspect
    print_ln('%s: %s %s %s', inspect.currentframe().f_back.f_lineno, \
             (a ^ cbits(b)).reveal(), a, hex(b))

test(sbits(3) + sbits(5), 3 ^ 5)
test(cbits(3) + cbits(5), 3 + 5)
test(cbits(3) + (5), 3 + 5)
test(cbits(3) ^ cbits(5), 3 ^ 5)
test(cbits(3) ^ (5), 3 ^ 5)
test(sbits(3) + 5, 3 ^ 5)
test(sbits(3) - sbits(5), 3 ^ 5)
test(sbit(1) * sbits(3), 3)
#test(cbits(1) * cbits(3), 3)
test(sbit(1) * 3, 3)
test(~sbits(1, n=64), 2**64 - 2)
test(sbits(3).equal(sbits(3)), 1)
test(sbits(3).equal(sbits(2)), 0)
test(sbit(1).if_else(sbits(3), sbits(5)), 3)
test(sbits(7) << 1, 14)
test(cbits(5) >> 1, 2)
test(sbit.bit_compose((sbit(1), sbit(0), sbit(1))), 5)
test(sbit(0).if_else(1, 2), 2)
test(sbit(1).if_else(1, 2), 1)
test(sbit(0).if_else(2, 1), 1)
test(sbit(1).if_else(2, 1), 2)

test(sbits.compose((sbits(2, n=2), sbits(1, n=2)), 2), 6)

x = MemValue(sbits(1234))
program.curr_tape.start_new_basicblock()
test(x, 1234)

x = MemValue(cbits(123))
program.curr_tape.start_new_basicblock()
test(x, 123)

x = memorize(cbits(234))
program.curr_tape.start_new_basicblock()
test(unmemorize(x), 234)

cbits(456).store_in_mem(1234)
program.curr_tape.start_new_basicblock()
test(cbits.load_mem(1234), 456)

test(sbits(1 << 63, n=64), 1 << 63)

bits = sbits(0x1234, n=40).bit_decompose(40)
test(sbits.bit_compose(bits), 0x1234)

test(sbits(5, n=4) ^ sbits(3, n=3), 6)
test(sbits(5, n=3) ^ sbits(3, n=4), 6)
test(sbits(13, n=4) ^ sbits(3, n=3), 14)
test(sbits(5, n=3) ^ sbits(11, n=4), 14)

b = sbits.get_random_bit()
test(b * (1 - b), 0)
bits = [sbits.get_random_bit() for i in range(40)]
print_ln('random: %s', sbits.bit_compose(bits).reveal())

k = 41
a = int(2.9142 * 2**k)
alpha = sbitint.get_type(2 * k)(a)
test(sbits.bit_compose((alpha >> 64).bit_decompose()[:64]), 0)